{"version":3,"sources":["hocs/formItem.hoc.js","../../common/helpers/mrHelper.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","mergeArray","a","b","obj","filter","mr","id","is_rejected","reason","remarks","statusCheck","isAllocated","isRejected","status","filterActive","_","data","el","active","ifNanReturnZero","num","parseInt","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","disabled","noStyle","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Crate","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","operatingCostMonthlyFormFields","LogisticCreateCPForm","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","createCPData","submit","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","success","useEffect","STOP_STEP_LOADING","updateDirectCost","useCallback","getFieldValue","directCost","forEach","setFieldsValue","round","updateOperatingCost","updateContingencyMargin","updateMinCostToBillForATrip","updatePriceShouldBeBilled","updateMarginAgreedForThisFlow","updateGrossMargins","handleFieldsChange","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick"],"mappings":"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","file":"static/js/58.bf90757a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport {Icon} from '@ant-design/compatible';\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\n\nconst {Option} = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\n            <p className=\"ant-upload-drag-icon\">\n              <Icon type=\"inbox\" />\n            </p>\n            {others ? (\n              <>\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value=\"Ggg\">\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName=\"checked\"\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","export const mergeArray = (a, b) => {\n  return a.map((item) => {\n    const obj = b.filter((i) => i.mr === item.id)[0];\n    if (obj) {\n      return {\n        ...item,\n        is_rejected: obj.is_rejected,\n        reason: obj.reason,\n        mr: obj.mr,\n        remarks: obj.remarks,\n      };\n    }\n    return item;\n  });\n};\n\nexport const statusCheck = (isAllocated, isRejected) => {\n  let status = 'Allocated';\n  if (!isAllocated && !isRejected) {\n    status = 'Pending';\n  } else if (isAllocated && !isRejected) {\n    status = 'Allocated';\n  } else if (!isAllocated && isRejected) {\n    status = 'Rejected';\n  }\n  return status;\n};\n\nexport const filterActive = (_, data) => {\n  return _.filter(data, (el) => el.active);\n};\n\nexport const ifNanReturnZero = (num) => {\n  return parseInt(num) ? parseInt(num) : 0;\n};\n","import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel: 'Standard Assets',\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert', 'HDPE Tray'],\n    },\n    customLabel: 'Insert Type',\n  },\n  // {\n  //   key: 'cost',\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   kwargs: {\n  //     placeholder: 'Cost',\n  //     type:'number'\n  //   },\n  //   customLabel:'Cost'\n  // },\n];\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type: 'number',\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const createFields = (arr) => {\n  let fields = [];\n  arr.map((key) => {\n    fields = [\n      ...fields,\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\n        ...item,\n        key: `${key}${item.key}`,\n      })),\n    ];\n    return null;\n  });\n  return fields;\n};\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const getSolutionProposal = (record) => {\n  if (\n    record.standard_assets === 'FLC' ||\n    record.standard_assets === 'FSC' ||\n    record.standard_assets === 'PP Box'\n  ) {\n    return {\n      [record.standard_assets]: record.std_ast_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'CRT6412' ||\n    record.standard_assets === 'CRT6418' ||\n    record.standard_assets === 'CRT6423' ||\n    record.standard_assets === 'CRT6435'\n  ) {\n    return {\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'Palletized CRT6412' ||\n    record.standard_assets === 'Palletized CRT6418' ||\n    record.standard_assets === 'Palletized CRT6423' ||\n    record.standard_assets === 'Palletized CRT6435' ||\n    record.standard_assets === 'Palletized PP Box' ||\n    record.standard_assets === 'Plastic Pallet' ||\n    record.standard_assets === 'Wooden Pallet'\n  ) {\n    return {\n      Lid: 1,\n      Crate: 1,\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\n    };\n  }\n\n  return {};\n};\n\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\n\nexport const getLabels = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\n    FSC:\n      insertType === 'Insert'\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6412:\n      insertType === 'Insert'\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6418:\n      insertType === 'Insert'\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6423:\n      insertType === 'Insert'\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6435:\n      insertType === 'Insert'\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6412',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6418',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6423',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6435',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'PP Box': ['PP Box'],\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\n  };\n  return specifications[type];\n};\n\nexport const getFields = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    FSC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6412:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6418:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6423:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6435:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\n  };\n  return specifications[type];\n};\n\nexport const formatStr = (str, typeStr) => {\n  return `${str}_${typeStr}`;\n};\n\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    FSC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6412:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6418:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6423:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6435:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'PP Box':\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\n    'Palletized PP Box': [\n      formatStr('std_ast', typeStr),\n      formatStr('palletized_lid', typeStr),\n      formatStr('pallet', typeStr),\n    ],\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = (type) => {\n  switch (type) {\n    case 'std_ast':\n      return 18;\n    case 'crate_lid':\n      return 12;\n    case 'palletized_lid':\n      return 12;\n    case 'insert1':\n      return 12;\n    case 'insert2':\n      return 12;\n    case 'sep_sheet':\n      return 12;\n    case 'mould':\n      return 18;\n    case 'hdpe':\n      return 12;\n    default:\n      return 0;\n  }\n};\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\n\nexport const operatingCostMonthlyFormFields = [\n  {\n    key: 'direct_cost',\n    kwargs: {\n      placeholder: 'Direct Cost',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true, },\n    },\n    customLabel: 'Direct Cost',\n  },\n  {\n    key: 'operating_cost',\n    kwargs: {\n      placeholder: 'Operating Cost',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Operating Cost',\n  },\n  {\n    key: 'contigency_margin',\n    kwargs: {\n      placeholder: 'Contingency Margin',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Contingency Margin',\n  },\n  {\n    key: 'min_cost_for_trip',\n    kwargs: {\n      placeholder: 'Min cost to bill for a trip',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Min cost to bill for a trip',\n  },\n  {\n    key: 'billing_price',\n    kwargs: {\n      placeholder: 'Price should be billed @ 20% margin',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Price should be billed @ 20% margin',\n  },\n  {\n    key: 'agreed_margin',\n    kwargs: {\n      placeholder: 'Margin agreed for this flow',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Margin agreed for this flow (%)',\n  },\n  {\n    key: 'trip_cost',\n    kwargs: {\n      placeholder: 'TRIP COST (SALES)',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'TRIP COST (SALES)',\n  },\n  {\n    key: 'gross_margins',\n    kwargs: {\n      placeholder: 'Gross Margins',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Gross Margins (%)',\n  },\n  {\n    key: 'remarks',\n    kwargs: {\n      placeholder: 'Remarks',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Remarks',\n  },\n];\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { operatingCostMonthlyFormFields } from 'common/formFields/createCP/operatingCostMonthly.formFields';\nimport { getFieldsByColumn, } from 'common/constants/solutionproposalCreateCP';\nimport { createCP, editCP } from 'common/api/auth';\n\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\nimport _ from 'lodash';\n\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n\n  const submit = async (data) =>{\n    setLoading(true)\n    console.log(data,'data to be submitted')\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active === 3){\n      if(id){\n        const { error } = await editCP(id,{ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Edit.',\n            description:\n              'Something went wrong CP editing failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n        }\n      }\n      else{\n        const { error } = await createCP({ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Create.',\n            description:\n              'Something went wrong CP creation failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n          notification.success({\n            message: 'CP Created/Edited Successfully.',\n          });\n        }\n      }\n    }}\n\n  useEffect( ()=>{\n    if(active!==3){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  const updateDirectCost = useCallback(() => {\n    if (form.getFieldValue('standard_assets') && form.getFieldValue('insert_type') && form.getFieldValue(\"kit_based_on_usage_ratio\")) {\n      let directCost = 0;\n      const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\n      console.log(depCostCols,'depCostCols')\n      depCostCols.forEach((i) => {\n        console.log(form.getFieldValue(i),i);\n        directCost += form.getFieldValue(i);\n      })\n      console.log(directCost,'directCost')\n      directCost /=form.getFieldValue(\"kit_based_on_usage_ratio\");\n      console.log(directCost,'again dC')\n      form.setFieldsValue({\n        \"direct_cost\" : _.round(directCost,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"direct_cost\" : 0,\n      })\n    }\n  },[form])\n\n  const updateOperatingCost = useCallback(() => {\n    if (form.getFieldValue(\"total_cost\")) {\n      form.setFieldsValue({\n        \"operating_cost\" : _.round(form.getFieldValue(\"total_cost\"),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"operating_cost\" : 0,\n      })\n    }\n  },[form])\n\n  const updateContingencyMargin = useCallback(() => {\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\")) {\n      form.setFieldsValue({\n        \"contigency_margin\" : _.round((form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\"))*0.02,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"contigency_margin\" : 0,\n      })\n    }\n  },[form])\n\n  const updateMinCostToBillForATrip = useCallback(() => {\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\") && form.getFieldValue(\"contigency_margin\")) {\n      form.setFieldsValue({\n        \"min_cost_for_trip\" : _.round(form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\")+form.getFieldValue(\"contigency_margin\"),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"min_cost_for_trip\" : 0,\n      })\n    }\n  },[form])\n\n  const updatePriceShouldBeBilled = useCallback(() => {\n    if (form.getFieldValue(\"min_cost_for_trip\")) {\n      form.setFieldsValue({\n        \"billing_price\" : _.round(form.getFieldValue(\"min_cost_for_trip\")/0.8,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"billing_price\" : 0,\n      })\n    }\n  },[form])\n\n  const updateMarginAgreedForThisFlow = useCallback(() => {\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"min_cost_for_trip\")) {\n      form.setFieldsValue({\n        \"agreed_margin\" : _.round((form.getFieldValue(\"trip_cost\")/form.getFieldValue(\"min_cost_for_trip\")-1)*100,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"agreed_margin\" : 0,\n      })\n    }\n  },[form])\n\n  const updateGrossMargins = useCallback(() => {\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"operating_cost\")) {\n      form.setFieldsValue({\n        \"gross_margins\" : _.round(((form.getFieldValue(\"trip_cost\")-form.getFieldValue(\"operating_cost\"))/form.getFieldValue(\"trip_cost\")*100),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"gross_margins\" : 0,\n      })\n    }\n  },[form])\n\n  useEffect( () => {\n    updateDirectCost();\n    updateOperatingCost();\n    updateContingencyMargin();\n    updateMinCostToBillForATrip();\n    updatePriceShouldBeBilled();\n    updateMarginAgreedForThisFlow();\n    updateGrossMargins();\n  }, [] )\n\n  const handleFieldsChange = useCallback(data => {\n\n    if(data[0]){\n      if(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n        if (currentInputField===\"trip_cost\") {\n          updateMarginAgreedForThisFlow();\n          updateGrossMargins();\n        }\n\n      }\n    }\n\n  \t},[form,])\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Opex</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}