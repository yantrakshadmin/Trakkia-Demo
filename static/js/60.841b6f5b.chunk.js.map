{"version":3,"sources":["hocs/formItem.hoc.js","../../common/helpers/mrHelper.js","../../common/formFields/createCP/logisticsCreateCP.formFields.js","forms/CreateCP/logisticsCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","mergeArray","a","b","obj","filter","mr","id","is_rejected","reason","remarks","statusCheck","isAllocated","isRejected","status","filterActive","_","data","el","active","ifNanReturnZero","num","parseInt","logisticCreateCPFormFields","placeholder","noStyle","disabled","LogisticCreateCPForm","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","createCPData","submit","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","handleFieldsChange","useCallback","currentInputField","getFieldValue","setFieldsValue","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick","ArrowRightOutlined"],"mappings":"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","file":"static/js/60.841b6f5b.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport {Icon} from '@ant-design/compatible';\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\n\nconst {Option} = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\n            <p className=\"ant-upload-drag-icon\">\n              <Icon type=\"inbox\" />\n            </p>\n            {others ? (\n              <>\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value=\"Ggg\">\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName=\"checked\"\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","export const mergeArray = (a, b) => {\n  return a.map((item) => {\n    const obj = b.filter((i) => i.mr === item.id)[0];\n    if (obj) {\n      return {\n        ...item,\n        is_rejected: obj.is_rejected,\n        reason: obj.reason,\n        mr: obj.mr,\n        remarks: obj.remarks,\n      };\n    }\n    return item;\n  });\n};\n\nexport const statusCheck = (isAllocated, isRejected) => {\n  let status = 'Allocated';\n  if (!isAllocated && !isRejected) {\n    status = 'Pending';\n  } else if (isAllocated && !isRejected) {\n    status = 'Allocated';\n  } else if (!isAllocated && isRejected) {\n    status = 'Rejected';\n  }\n  return status;\n};\n\nexport const filterActive = (_, data) => {\n  return _.filter(data, (el) => el.active);\n};\n\nexport const ifNanReturnZero = (num) => {\n  return parseInt(num) ? parseInt(num) : 0;\n};\n","// min_warehouse = models.FloatField(default=0, blank=True, null=True)\n// transportation_w1_c1 = models.FloatField(default=0, blank=True, null=True)\n// transportation_c2_w2 = models.FloatField(default=0, blank=True, null=True)\n// transportation_w2_w1 = models.FloatField(default=0, blank=True, null=True)\n// total_cost_supply_chain = models.FloatField(default=0, blank=True, null=True)\n// labor_cost_perton = models.FloatField(default=0, blank=True, null=True)\n// repair_reconditioning = models.FloatField(default=0, blank=True, null=True)\n// other_cost = models.FloatField(default=0, blank=True, null=True)\n// total_cost = models.FloatField(default=0, blank=True, null=True)\n//\n\nimport { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const logisticCreateCPFormFields = [\n  {\n    key: 'min_warehouse',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Minimum Warehouse',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Minimum Warehouse'\n  },\n  {\n    key: 'transportation_w1_c1',\n    kwargs: {\n      placeholder: 'Transportation W1 C1',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Transportation W1 C1',\n  },\n  {\n    key: 'transportation_c2_w2',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Transportation C2 W2',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    customLabel: 'Transportation C2 W2'\n  },\n  {\n    key: 'transportation_w2_w1',\n    kwargs: {\n      placeholder: 'Transportation W2 W1',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Transportation W2 W1',\n  },\n  {\n    key: 'total_cost_supply_chain',\n    kwargs: {\n      placeholder: 'Total Cost Supply Chain',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n\n    customLabel: 'Total Cost Supply Chain',\n  },\n  {\n    key: 'labor_cost_perton',\n    kwargs: {\n      placeholder: 'Labour Cost Perton',\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Labour Cost Perton',\n  },\n  {\n    key: 'repair_reconditioning',\n    kwargs: {\n      placeholder: 'Repair Reconditioning',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Repair Reconditioning',\n  },\n  {\n    key: 'other_cost',\n    kwargs: {\n      placeholder: 'Other Cost',\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Other Cost',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      disabled: true,\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Total Cost',\n  },\n\n]\n","import React, { useEffect, useState,useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { ArrowRightOutlined } from '@ant-design/icons';\nimport { logisticCreateCPFormFields }\n  from 'common/formFields/createCP/logisticsCreateCP.formFields';\n\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\n\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active===2){\n      onNext();\n    }\n  }\n  useEffect( ()=>{\n    if(active!==2){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n\n  const handleFieldsChange = useCallback(data => {\n\n\t\tif(data[0]){\n\t\t\tif(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n\n        if (currentInputField===\"min_warehouse\" || currentInputField===\"transportation_w1_c1\" || currentInputField===\"transportation_c2_w2\" || currentInputField===\"transportation_w2_w1\" || currentInputField===\"total_cost_supply_chain\" || currentInputField===\"labor_cost_perton\" || currentInputField===\"repair_reconditioning\" || currentInputField===\"other_cost\" || currentInputField===\"total_cost\") {\n          if ( form.getFieldValue(\"min_warehouse\") || form.getFieldValue(\"transportation_w1_c1\") || form.getFieldValue(\"transportation_c2_w2\") || form.getFieldValue(\"transportation_w2_w1\") ) {\n            form.setFieldsValue({\n              \"total_cost_supply_chain\" : ifNanReturnZero(form.getFieldValue(\"min_warehouse\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w1_c1\"))+ifNanReturnZero(form.getFieldValue(\"transportation_c2_w2\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w2_w1\")),\n            })\n          } else {\n            form.setFieldsValue({\n              \"total_cost_supply_chain\" : 0,\n            })\n          }\n\n          if ( form.getFieldValue(\"total_cost_supply_chain\") || form.getFieldValue(\"labor_cost_perton\") || form.getFieldValue(\"repair_reconditioning\") || form.getFieldValue(\"other_cost\") ) {\n            form.setFieldsValue({\n              \"total_cost\" : ifNanReturnZero(form.getFieldValue(\"total_cost_supply_chain\"))+ifNanReturnZero(form.getFieldValue(\"labor_cost_perton\"))+ifNanReturnZero(form.getFieldValue(\"repair_reconditioning\"))+ifNanReturnZero(form.getFieldValue(\"other_cost\")),\n            })\n          } else {\n            form.setFieldsValue({\n              \"total_cost\" : 0,\n            })\n          }\n        }\n\n\t\t\t}\n\t\t}\n\n  \t},[form,])\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Logistic Details</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}