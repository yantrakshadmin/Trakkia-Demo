{"version":3,"sources":["hocs/formItem.hoc.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","disabled","noStyle","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Crate","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","insert_type","setFields","labels","setLabels","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","updateTotalKitQtysCols","useCallback","getFieldValue","forEach","setFieldsValue","mould_quantity","updateMonthCols","handleFieldsChange","currentInputField","totalKitQtysCols","qtyPerKitCols","rateCols","totalMatReqCols","totalCostCols","monthCols","depCostCols","idx","totalMatReqVal","_","round","spinning","initialValues","onFinish","layout","onFieldsChange","autoComplete","orientation","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","justifyContent","span","formItem","justify","htmlType","onClick"],"mappings":"mSAgBOA,E,IAAAA,OACDC,EAAgB,IAASC,MAmCzBC,EAAQ,CACZC,KAAM,OACNC,OA5BsB,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAG3BC,YAAW,WAEP,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,iBACL,QACA,WACEL,EAAQG,EAAOG,WAEjB,GAGER,GACFK,EAAOI,cAAcT,KAKxB,UAuLQU,IAnKE,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,IAAKC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QAC5DC,EAAc,GAOlB,OANIH,GACEA,EAAOG,cACTA,EAAcH,EAAOG,aAIjBJ,GACN,KAAKK,IAAmBC,MACtB,OACE,sBAAMC,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,qCAAOQ,KAAK,UAAab,KAK/B,KAAKM,IAAmBQ,aACtB,OACE,sBAAMN,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,qCAAaQ,KAAK,UAAab,KAIrC,KAAKM,IAAmBS,eACtB,OACE,sBAAMP,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAQW,QAAR,iBAAoBhB,EAAYhB,EAAhC,CAAuCiC,MAAO,CAACC,UAAW,OAAQC,MAAO,WACvE,uBAAGC,UAAU,wBACX,kBAAC,IAAD,CAAMnB,KAAK,WAEZC,EACC,oCACE,uBAAGkB,UAAU,uBAAuBlB,EAAOmB,IAC3C,uBAAGD,UAAU,uBAAuBlB,EAAOoB,KAE3C,OAKZ,KAAKhB,IAAmBiB,OACtB,OACE,sBAAMf,KAAN,eACEgB,cAAY,EACZ1B,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAYL,EACTE,EAAOuB,cAAcC,KAAI,SAACC,EAAMC,GAAP,OACxB,kBAAC/C,EAAD,CACEiB,IAAK8B,EAAMC,WACXC,OAAQH,EAAKzB,EAAO6B,aACpBC,MAAOL,EAAKK,OAASL,EAAKzB,EAAOJ,MAAQ6B,GACxCzB,EAAO6B,YACN,0BAAMd,MAAO,CAACgB,SAAU,GAAIC,WAAY,SAAUP,EAAKzB,EAAO6B,cAE9DJ,EAAKlB,OAASkB,EAAKzB,EAAOJ,MAAQ6B,EAEnCzB,EAAOiC,SACN,yBAAKf,UAAU,MAAMH,MAAO,CAACmB,SAAU,SACpClC,EAAOiC,SAAST,KAAI,SAACW,GAAD,OACnB,0BAAMpB,MAAO,CAACgB,SAAU,GAAIK,WAAY,EAAGC,YAAa,IAAKZ,EAAKU,QAGpE,WAOhB,KAAK/B,IAAmBkC,MACtB,OACE,sBAAMhC,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAOtB,MAAP,CAAaiD,MAAM,OAChB9B,EAAOuC,aAAaf,KAAI,SAACC,GAAD,OACvB,uBAAO7B,IAAK6B,EAAKK,MAAOA,MAAOL,EAAKK,OACjCL,EAAKlB,YAOlB,KAAKH,IAAmBoC,KACtB,OACE,sBAAMlC,KAAN,eACEV,IAAKA,GACDO,EAFN,CAGEI,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,IACP,uBAAY4C,SAAU,SAACC,QAI7B,KAAKtC,IAAmBuC,aACtB,OACE,sBAAMrC,KAAN,eACEV,IAAKA,GACDO,EAFN,CAGEI,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,IACP,uBAAY4C,SAAU,SAACC,KAA4BE,OAAO,WAIhE,KAAKxC,IAAmByC,kBACtB,OACE,sBAAMvC,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,kBAACvB,EAAD,CAAe6D,SAAUzC,EAAOyC,UAC7BzC,EAAO8C,aAAatB,KAAI,SAACW,GAAD,OACvB,uBAAUL,MAAOK,EAAEL,OAAQK,EAAE5B,YAKvC,KAAKH,IAAmB2C,OACtB,OACE,sBAAMzC,KAAN,eACEV,IAAKA,EACLoD,cAAc,WACV7C,EAHN,CAIEI,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,IACP,sBAAYC,IAGlB,QACE,OAAO,Q,mIChNAmD,EAAqC,CAChD,CACErD,IAAK,kBACLG,KAAMK,IAAmBiB,OACzBrB,OAAQ,CACNuB,cAtBuB,CAC3B,MACA,MACA,UACA,UACA,UACA,UACA,qBACA,qBACA,qBACA,qBACA,SACA,oBACA,iBACA,kBAUEtB,YAAa,mBAEf,CACEL,IAAK,cACLG,KAAMK,IAAmBiB,OACzBrB,OAAQ,CACNuB,cAAe,CAAC,SAAU,cAE5BtB,YAAa,gBAmKJiD,GArEH9C,IAAmBC,MASnBD,IAAmBC,MAUnBD,IAAmBC,MASnBD,IAAmBC,MAQnBD,IAAmBC,MASnBD,IAAmBC,MASnBD,IAAmBC,MASnBD,IAAmBC,MAMsB,CACjD,CACET,IAAK,YACLE,OAAQ,CACNqD,YAAa,WACbpD,KAAM,SACNqD,UAAU,GAEZpD,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,iBAEf,CACEL,IAAK,mBACLE,OAAQ,CACNqD,YAAa,eACbpD,KAAM,UAERC,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,gBAEf,CACEL,IAAK,QACLE,OAAQ,CACNqD,YAAa,OACbpD,KAAM,UAERA,KAAMK,IAAmBC,MACzBL,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBpD,YAAa,QAEf,CACEL,IAAK,eACLE,OAAQ,CACNqD,YAAa,kBACbC,UAAU,GAEZpD,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,mBAEf,CACEL,IAAK,cACLE,OAAQ,CACNqD,YAAa,aACbpD,KAAM,SACNqD,UAAU,GAEZpD,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,cAEf,CACEL,IAAK,SACLE,OAAQ,CACNqD,YAAa,QACbpD,KAAM,SACNuD,IAAK,GAEPvD,KAAMK,IAAmBC,MACzBL,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBpD,YAAa,SAEf,CACEL,IAAK,YACLE,OAAQ,CACNqD,YAAa,WACbC,UAAU,GAEZrD,KAAMK,IAAmBC,MACzBL,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBpD,YAAa,cAIJsD,EAAe,SAACC,GAC3B,IAAIC,EAAS,GAWb,OAVAD,EAAIhC,KAAI,SAAC5B,GAQP,OAPA6D,EAAS,GAAH,mBACDA,GADC,YAEDP,EAAoC1B,KAAI,SAACC,GAAD,mBAAC,eACvCA,GADsC,IAEzC7B,IAAK,GAAF,OAAKA,GAAL,OAAW6B,EAAK7B,YAGhB,QAEF6D,I,iOCxRIC,EAAsB,SAACC,GAClC,MAC6B,QAA3BA,EAAOC,iBACoB,QAA3BD,EAAOC,iBACoB,WAA3BD,EAAOC,gBAEP,eACGD,EAAOC,gBAAkBD,EAAOE,yBAIR,YAA3BF,EAAOC,iBACoB,YAA3BD,EAAOC,iBACoB,YAA3BD,EAAOC,iBACoB,YAA3BD,EAAOC,gBAEP,eACGD,EAAOC,gBAAkBD,EAAOG,2BAIR,uBAA3BH,EAAOC,iBACoB,uBAA3BD,EAAOC,iBACoB,uBAA3BD,EAAOC,iBACoB,uBAA3BD,EAAOC,iBACoB,sBAA3BD,EAAOC,iBACoB,mBAA3BD,EAAOC,iBACoB,kBAA3BD,EAAOC,gBAEP,aACEG,IAAK,EACLC,MAAO,GACNL,EAAOC,gBAAkBD,EAAOM,gCAI9B,IAKIC,EAAY,SAACnE,EAAMoE,GA2E9B,MA1EuB,CACrBC,IACiB,WAAfD,EACI,CAAC,MAAO,gBAAiB,gBAAiB,mBAC1C,CAAC,MAAO,kBAAmB,QAAS,QAC1CE,IACiB,WAAfF,EACI,CAAC,MAAO,gBAAiB,gBAAiB,mBAC1C,CAAC,MAAO,kBAAmB,QAAS,QAC1CG,QACiB,WAAfH,EACI,CAAC,UAAW,YAAa,gBAAiB,gBAAiB,mBAC3D,CAAC,UAAW,YAAa,kBAAmB,QAAS,QAC3DI,QACiB,WAAfJ,EACI,CAAC,UAAW,YAAa,gBAAiB,gBAAiB,mBAC3D,CAAC,UAAW,YAAa,kBAAmB,QAAS,QAC3DK,QACiB,WAAfL,EACI,CAAC,UAAW,YAAa,gBAAiB,gBAAiB,mBAC3D,CAAC,UAAW,YAAa,kBAAmB,QAAS,QAC3DM,QACiB,WAAfN,EACI,CAAC,UAAW,YAAa,gBAAiB,gBAAiB,mBAC3D,CAAC,UAAW,YAAa,kBAAmB,QAAS,QAC3D,qBACiB,WAAfA,EACI,CACE,qBACA,iBACA,SACA,gBACA,gBACA,mBAEF,CAAC,qBAAsB,iBAAkB,SAAU,kBAAmB,QAAS,QACrF,qBACiB,WAAfA,EACI,CACE,qBACA,iBACA,SACA,gBACA,gBACA,mBAEF,CAAC,qBAAsB,iBAAkB,SAAU,kBAAmB,QAAS,QACrF,qBACiB,WAAfA,EACI,CACE,qBACA,iBACA,SACA,gBACA,gBACA,mBAEF,CAAC,qBAAsB,iBAAkB,SAAU,kBAAmB,QAAS,QACrF,qBACiB,WAAfA,EACI,CACE,qBACA,iBACA,SACA,gBACA,gBACA,mBAEF,CAAC,qBAAsB,iBAAkB,SAAU,kBAAmB,QAAS,QACrF,SAAU,CAAC,UACX,oBAAqB,CAAC,oBAAqB,iBAAkB,UAC7D,iBAAkB,CAAC,iBAAkB,kBACrC,gBAAiB,CAAC,gBAAiB,mBAEfpE,IAGX2E,EAAY,SAAC3E,EAAMoE,GA+C9B,MA9CuB,CACrBC,IACiB,WAAfD,EACIZ,YAAa,CAAC,UAAW,UAAW,UAAW,cAC/CA,YAAa,CAAC,UAAW,YAAa,QAAS,SACrDc,IACiB,WAAfF,EACIZ,YAAa,CAAC,UAAW,UAAW,UAAW,cAC/CA,YAAa,CAAC,UAAW,YAAa,QAAS,SACrDe,QACiB,WAAfH,EACIZ,YAAa,CAAC,UAAW,YAAa,UAAW,UAAW,cAC5DA,YAAa,CAAC,UAAW,YAAa,YAAa,QAAS,SAClEgB,QACiB,WAAfJ,EACIZ,YAAa,CAAC,UAAW,YAAa,UAAW,UAAW,cAC5DA,YAAa,CAAC,UAAW,YAAa,YAAa,QAAS,SAClEiB,QACiB,WAAfL,EACIZ,YAAa,CAAC,UAAW,YAAa,UAAW,UAAW,cAC5DA,YAAa,CAAC,UAAW,YAAa,YAAa,QAAS,SAClEkB,QACiB,WAAfN,EACIZ,YAAa,CAAC,UAAW,YAAa,UAAW,UAAW,cAC5DA,YAAa,CAAC,UAAW,YAAa,YAAa,QAAS,SAClE,qBACiB,WAAfY,EACIZ,YAAa,CAAC,UAAW,iBAAkB,SAAU,UAAW,UAAW,cAC3EA,YAAa,CAAC,UAAW,iBAAkB,SAAU,YAAa,QAAS,SACjF,qBACiB,WAAfY,EACIZ,YAAa,CAAC,UAAW,iBAAkB,SAAU,UAAW,UAAW,cAC3EA,YAAa,CAAC,UAAW,iBAAkB,SAAU,YAAa,QAAS,SACjF,qBACiB,WAAfY,EACIZ,YAAa,CAAC,UAAW,iBAAkB,SAAU,UAAW,UAAW,cAC3EA,YAAa,CAAC,UAAW,iBAAkB,SAAU,YAAa,QAAS,SACjF,qBACiB,WAAfY,EACIZ,YAAa,CAAC,UAAW,iBAAkB,SAAU,UAAW,UAAW,cAC3EA,YAAa,CAAC,UAAW,iBAAkB,SAAU,YAAa,QAAS,SACjF,SAAoCA,YAAa,CAAC,YAClD,oBAAqBA,YAAa,CAAC,UAAW,iBAAkB,WAChE,iBAAkBA,YAAa,CAAC,UAAW,mBAC3C,gBAAiBA,YAAa,CAAC,UAAW,oBAEtBxD,IAGX4E,EAAY,SAACC,EAAKC,GAC7B,gBAAUD,EAAV,YAAiBC,IAGNC,EAAoB,SAAC/E,EAAMoE,EAAYU,GAgLlD,MA/KuB,CACrBT,IACiB,WAAfD,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1BR,IACiB,WAAfF,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1BP,QACiB,WAAfH,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1BN,QACiB,WAAfJ,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1BL,QACiB,WAAfL,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1BJ,QACiB,WAAfN,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,GACvBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1B,qBACiB,WAAfV,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1B,qBACiB,WAAfV,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1B,qBACiB,WAAfV,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1B,qBACiB,WAAfV,EACI,CACEQ,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,UAAWE,GACrBF,EAAU,UAAWE,GACrBF,EAAU,YAAaE,IAEzB,CACEF,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,GACpBF,EAAU,YAAaE,GACvBF,EAAU,QAASE,GACnBF,EAAU,OAAQE,IAE1B,SAC4B,CAACF,EAAU,UAAWE,IAClD,oBAAqB,CACnBF,EAAU,UAAWE,GACrBF,EAAU,iBAAkBE,GAC5BF,EAAU,SAAUE,IAEtB,iBAAkB,CAACF,EAAU,UAAWE,GAAUF,EAAU,iBAAkBE,IAC9E,gBAAiB,CAACF,EAAU,UAAWE,GAAUF,EAAU,iBAAkBE,KAEzD9E,IAGXgF,EAAuB,SAAChF,GACnC,OAAQA,GACN,IAAK,UACH,OAAO,GACT,IAAK,YAEL,IAAK,iBAEL,IAAK,UAEL,IAAK,UAEL,IAAK,YACH,OAAO,GACT,IAAK,QACH,OAAO,GACT,IAAK,OACH,OAAO,GACT,QACE,OAAO,K,mXCtXAiF,EAA+B,SAAC,GAAyC,EAAxCC,GAAyC,IAArCC,EAAoC,EAApCA,SAAgBC,GAAoB,EAA1BC,KAA0B,EAApBD,QAAQE,EAAY,EAAZA,OAAY,EACtDC,oBAAS,GAD6C,mBAC7EC,EAD6E,KACpEC,EADoE,OAErE,IAAKC,UAAbC,EAF6E,oBAG9EC,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAOA,EAAEC,KAAKC,gBAJ4C,EAKxDX,mBAC1BZ,YAAUmB,EAAMjC,iBAAmB,MAAOiC,EAAMK,aAAe,WANmB,mBAK7EzC,EAL6E,KAKrE0C,EALqE,OAQxDb,mBAC1BpB,YAAU2B,EAAMjC,iBAAmB,MAAOiC,EAAMK,aAAe,WATmB,mBAQ7EE,EAR6E,KAQrEC,EARqE,KAW9EC,EAAM,uCAAG,WAAON,GAAP,SAAAO,EAAA,6DACbf,GAAW,GADE,SAEPG,EAAS,CAAC5F,KAAMyG,IAAoBR,KAAK,eAAKA,KAFvC,OAGbR,GAAW,GACI,IAAXH,GACFF,IALW,2CAAH,sDAgBZsB,qBAAU,WACO,IAAXpB,IACFK,EAAKY,SACLX,EAAS,CAAC5F,KAAM2G,SAEjB,CAACrB,IAIJ,IAAMsB,EAAyBC,uBAAY,WAMrClB,EAAKmB,cAAc,6BACI/B,YACvBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,YAGeC,SAAQ,SAAC3E,GACnBuD,EAAKmB,cAAc1E,KACZ,mBAANA,EACFuD,EAAKqB,eAAL,eACG5E,EAAIuD,EAAKmB,cAAc,8BAG1BnB,EAAKqB,eAAe,CAClBC,eAAgB,UAMzB,CAACtB,IAEEuB,EAAkBL,uBAAY,WAChB9B,YAChBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,SAEQC,SAAQ,SAAC3E,GACZuD,EAAKmB,cAAc1E,IACtBuD,EAAKqB,eAAL,eACG5E,EAAI4C,YAAqB5C,EAAEzB,MAAM,GAAI,WAI3C,CAACgF,IAEJe,qBAAU,WACRE,IACAM,MACC,CAACvB,IAEJ,IAAMwB,EAAqBN,uBACzB,SAACZ,GACC,GAAIA,EAAK,IACHA,EAAK,GAAGjH,KAAM,CAChB,IAAMoI,EAAoBnB,EAAK,GAAGjH,KAAK,GAGvC,GAA0B,oBAAtBoI,GAAiE,gBAAtBA,EAC7ChB,EACEzB,YAAUgB,EAAKmB,cAAc,mBAAoBnB,EAAKmB,cAAc,iBAEtER,EACEnC,YAAUwB,EAAKmB,cAAc,mBAAoBnB,EAAKmB,cAAc,iBAEtEF,IACAM,QACK,CACL,IAAMG,EAAmBtC,YACvBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,YAEIQ,EAAgBvC,YACpBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,mBAEIS,EAAWxC,YACfY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,QAEIU,EAAkBzC,YACtBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,eAEIW,EAAgB1C,YACpBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,cAEIY,EAAY3C,YAChBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,SAEIa,EAAc5C,YAClBY,EAAKmB,cAAc,mBACnBnB,EAAKmB,cAAc,eACnB,YAGFQ,EAAcP,SAAQ,SAAC3E,EAAGwF,GACxB,GACER,IAAsBC,EAAiBO,IACvCR,IAAsBE,EAAcM,IACpCR,IAAsBG,EAASK,IAC/BR,IAAsBI,EAAgBI,IACtCR,IAAsBK,EAAcG,IACpCR,IAAsBM,EAAUE,IAChCR,IAAsBO,EAAYC,GAClC,CACA,GACEjC,EAAKmB,cAAcO,EAAiBO,KACpCjC,EAAKmB,cAAcQ,EAAcM,IACjC,CAAC,IAAD,EACMC,EACJlC,EAAKmB,cAAcO,EAAiBO,IACpCjC,EAAKmB,cAAcQ,EAAcM,IACnCjC,EAAKqB,gBAAL,mBACGQ,EAAgBI,GAAOC,GAD1B,cAEGJ,EAAcG,GAAOjC,EAAKmB,cAAcS,EAASK,IAAQC,GAF5D,QAIK,CAAC,IAAD,EACLlC,EAAKqB,gBAAL,mBACGQ,EAAgBI,GAAO,GAD1B,cAEGH,EAAcG,GAAO,GAFxB,IAOAjC,EAAKmB,cAAcW,EAAcG,KACjCjC,EAAKmB,cAAcY,EAAUE,KAC7BjC,EAAKmB,cAAc,gBAEnBnB,EAAKqB,eAAL,eACGW,EAAYC,GAAOE,IAAEC,MACnBpC,EAAKmB,cAAcW,EAAcG,IAChCjC,EAAKmB,cAAcY,EAAUE,IAC7B,GACAjC,EAAKmB,cAAc,gBACrB,KAIJnB,EAAKqB,eAAL,eACGW,EAAYC,GAAO,YASpC,CAACjC,EAAMjC,EAAQ2C,IAkBjB,OACE,uBAAM2B,SAAUxC,GACd,uBACEyC,cAAa,2BACRnC,GADQ,IAEXK,YAAaL,EAAMK,aAAe,SAClCtC,gBAAiBiC,EAAMjC,iBAAmB,QAE5CqE,SAAU3B,EACVZ,KAAMA,EACNwC,OAAO,WAEPC,eAAgBjB,EAChBkB,aAAa,OACb,uBAASC,YAAY,QAArB,SACA,yBAAKnH,UAAU,YACZ2E,EAAMyC,aAAe,kCAAiB,KACtCzC,EAAM0C,aAAe,kCAAiB,KACtC1C,EAAM2C,eAAiB,oCAAmB,KAC1C3C,EAAM4C,eAAiB,qCAAoB,KAC3C5C,EAAM6C,wBAA0B,sDAAqC,KACrE7C,EAAM8C,0BAA4B,wDAAuC,KACzE9C,EAAM+C,YAAc,0CAAyB,KAC7C/C,EAAMgD,0BAA4B,wDAAuC,KACzEhD,EAAMiD,YAAc,0CAAyB,MAEhD,uBAAK/H,MAAO,CAACgI,eAAgB,SAC1B9F,IAAmCzB,KAAI,SAACC,EAAMkG,GAAP,OACtC,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC3B,uBAAKC,KAAM,GACT,yBAAK9H,UAAU,+BACb,8BAGH,YAAIuC,GAAQ/C,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OAC3B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,EAAKxB,mBAKjB,uBAAKc,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OAC3B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,EAAG,IAAIc,KAAI,SAACC,EAAMkG,GAAP,OAC5B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,GAAI,IAAIc,KAAI,SAACC,EAAMkG,GAAP,OAC7B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,GAAI,IAAIc,KAAI,SAACC,EAAMkG,GAAP,OAC7B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,GAAI,IAAIc,KAAI,SAACC,EAAMkG,GAAP,OAC7B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,GAAI,IAAIc,KAAI,SAACC,EAAMkG,GAAP,OAC7B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAKlB,uBAAKV,MAAO,CAACgI,eAAgB,SAC1B3C,EAAO1F,MAAM,EAAG,GAAGc,KAAI,SAACC,EAAMkG,GAAP,OACtB,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,+BAClC,2BAAIO,QAIT,YAAIgC,GAAQ/C,MAAM,GAAI,IAAIc,KAAI,SAACC,EAAMkG,GAAP,OAC7B,uBAAKqB,KAAM,GACT,yBAAKpJ,IAAK+H,EAAIhG,WAAYT,UAAU,OACjC+H,YAASxH,SAsDlB,uBAAKyH,QAAQ,iBACX,yBAAKhI,UAAU,OACb,uBAAQnB,KAAK,UAAUoJ,SAAS,SAAS/F,UAAQ,GAAjD,UAGA,yBAAKlC,UAAU,QACf,uBAAQnB,KAAK,UAAUqJ,QAASlE,GAAhC,WAIF,uBAAQnF,KAAK,OAAOoJ,SAAS,UAC3B,kBAAC,IAAD,CAAoBpI,MAAO,CAACgB,SAAU,WAQnCiD","file":"static/js/59.d3a842e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport {Icon} from '@ant-design/compatible';\r\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\r\n\r\nconst {Option} = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input size=\"middle\" {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber size=\"middle\" {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\r\n            <p className=\"ant-upload-drag-icon\">\r\n              <Icon type=\"inbox\" />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\r\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value=\"Ggg\">\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName=\"checked\"\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\r\n\r\nconst solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const solutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'standard_assets',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: solutionAssetOptions,\r\n    },\r\n    customLabel: 'Standard Assets',\r\n  },\r\n  {\r\n    key: 'insert_type',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: ['Insert', 'HDPE Tray'],\r\n    },\r\n    customLabel: 'Insert Type',\r\n  },\r\n  // {\r\n  //   key: 'cost',\r\n  //   type: FORM_ELEMENT_TYPES.INPUT,\r\n  //   kwargs: {\r\n  //     placeholder: 'Cost',\r\n  //     type:'number'\r\n  //   },\r\n  //   customLabel:'Cost'\r\n  // },\r\n];\r\n\r\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\r\n\r\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\r\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// mould_month = models.FloatField(default=0, blank=True, null=True)\r\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n\r\nexport const formListSolutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'specification',\r\n    kwargs: {\r\n      placeholder: 'Specification',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Specification',\r\n  },\r\n  {\r\n    key: 'quantity',\r\n    kwargs: {\r\n      placeholder: 'Total KIT Quantity',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total KIT Quantity',\r\n  },\r\n  {\r\n    key: 'quantity_per_kit',\r\n    kwargs: {\r\n      placeholder: 'Qyt/KIT',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Qyt/KIT',\r\n  },\r\n  {\r\n    key: 'rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: 'tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Material Req',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: 'total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: 'month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: 'dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const stdAssetsProposalCreateCPFormFields = [\r\n  {\r\n    key: '_quantity',\r\n    kwargs: {\r\n      placeholder: 'Quantity',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Kit Qty',\r\n  },\r\n  {\r\n    key: '_quantity_perkit',\r\n    kwargs: {\r\n      placeholder: 'Quantity/Kit',\r\n      type: 'number',\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Quantity/Kit',\r\n  },\r\n  {\r\n    key: '_rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: '_tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Mat. Req.',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: '_total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: '_month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n      type: 'number',\r\n      min: 0,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: '_dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const createFields = (arr) => {\r\n  let fields = [];\r\n  arr.map((key) => {\r\n    fields = [\r\n      ...fields,\r\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\r\n        ...item,\r\n        key: `${key}${item.key}`,\r\n      })),\r\n    ];\r\n    return null;\r\n  });\r\n  return fields;\r\n};\r\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\n\r\nexport const solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const getSolutionProposal = (record) => {\r\n  if (\r\n    record.standard_assets === 'FLC' ||\r\n    record.standard_assets === 'FSC' ||\r\n    record.standard_assets === 'PP Box'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.std_ast_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'CRT6412' ||\r\n    record.standard_assets === 'CRT6418' ||\r\n    record.standard_assets === 'CRT6423' ||\r\n    record.standard_assets === 'CRT6435'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'Palletized CRT6412' ||\r\n    record.standard_assets === 'Palletized CRT6418' ||\r\n    record.standard_assets === 'Palletized CRT6423' ||\r\n    record.standard_assets === 'Palletized CRT6435' ||\r\n    record.standard_assets === 'Palletized PP Box' ||\r\n    record.standard_assets === 'Plastic Pallet' ||\r\n    record.standard_assets === 'Wooden Pallet'\r\n  ) {\r\n    return {\r\n      Lid: 1,\r\n      Crate: 1,\r\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\r\n    };\r\n  }\r\n\r\n  return {};\r\n};\r\n\r\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\r\n\r\nexport const getLabels = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6412',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6418',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6423',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6435',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'PP Box': ['PP Box'],\r\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\r\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\r\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getFields = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\r\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\r\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\r\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const formatStr = (str, typeStr) => {\r\n  return `${str}_${typeStr}`;\r\n};\r\n\r\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'PP Box':\r\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\r\n    'Palletized PP Box': [\r\n      formatStr('std_ast', typeStr),\r\n      formatStr('palletized_lid', typeStr),\r\n      formatStr('pallet', typeStr),\r\n    ],\r\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getDefaultMonthValue = (type) => {\r\n  switch (type) {\r\n    case 'std_ast':\r\n      return 18;\r\n    case 'crate_lid':\r\n      return 12;\r\n    case 'palletized_lid':\r\n      return 12;\r\n    case 'insert1':\r\n      return 12;\r\n    case 'insert2':\r\n      return 12;\r\n    case 'sep_sheet':\r\n      return 12;\r\n    case 'mould':\r\n      return 18;\r\n    case 'hdpe':\r\n      return 12;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n","import React, {useEffect, useState, useCallback} from 'react';\r\nimport {Form, Col, Row, Button, Divider, Spin, Tag} from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ArrowRightOutlined} from '@ant-design/icons';\r\nimport {ADD_CREATE_CP_DATA, STOP_STEP_LOADING} from 'common/actions';\r\nimport {solutionProposalCreateCPFormFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\nimport {\r\n  getFields,\r\n  getLabels,\r\n  getFieldsByColumn,\r\n  getDefaultMonthValue,\r\n} from 'common/constants/solutionproposalCreateCP';\r\n\r\nimport _ from 'lodash';\r\n\r\nexport const SolutionProposalCreateCPForm = ({id, onCancel, lead, onNext, active}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((e) => e.data.createCPData);\r\n  const [fields, setFields] = useState(\r\n    getFields(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\r\n  );\r\n  const [labels, setLabels] = useState(\r\n    getLabels(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\r\n  );\r\n  const submit = async (data) => {\r\n    setLoading(true);\r\n    await dispatch({type: ADD_CREATE_CP_DATA, data: {...data}});\r\n    setLoading(false);\r\n    if (active === 1) {\r\n      onNext();\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  // \tif (form.getFieldValue(\"standard_assets\") && form.getFieldValue(\"insert_type\")) {\r\n  // \t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n  // \t\tsetLabels(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n  // \t}\r\n  // },[])\r\n\r\n  useEffect(() => {\r\n    if (active !== 1) {\r\n      form.submit();\r\n      dispatch({type: STOP_STEP_LOADING});\r\n    }\r\n  }, [active]);\r\n\r\n  console.log(state, 'state');\r\n\r\n  const updateTotalKitQtysCols = useCallback(() => {\r\n    console.log(\r\n      form.getFieldValue('kit_based_on_usage_ratio'),\r\n      'kit based on',\r\n      state.kit_based_on_usage_ratio,\r\n    );\r\n    if (form.getFieldValue('kit_based_on_usage_ratio')) {\r\n      const totalKitQtysCols = getFieldsByColumn(\r\n        form.getFieldValue('standard_assets'),\r\n        form.getFieldValue('insert_type'),\r\n        'quantity',\r\n      );\r\n      console.log(totalKitQtysCols, 'Totl wuanti');\r\n      totalKitQtysCols.forEach((i) => {\r\n        if (!form.getFieldValue(i)) {\r\n          if (i !== 'mould_quantity') {\r\n            form.setFieldsValue({\r\n              [i]: form.getFieldValue('kit_based_on_usage_ratio'),\r\n            });\r\n          } else {\r\n            form.setFieldsValue({\r\n              mould_quantity: 1,\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [form]);\r\n\r\n  const updateMonthCols = useCallback(() => {\r\n    const monthCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'month',\r\n    );\r\n    monthCols.forEach((i) => {\r\n      if (!form.getFieldValue(i)) {\r\n        form.setFieldsValue({\r\n          [i]: getDefaultMonthValue(i.slice(0, -6)),\r\n        });\r\n      }\r\n    });\r\n  }, [form]);\r\n\r\n  useEffect(() => {\r\n    updateTotalKitQtysCols();\r\n    updateMonthCols();\r\n  }, [form]);\r\n\r\n  const handleFieldsChange = useCallback(\r\n    (data) => {\r\n      if (data[0]) {\r\n        if (data[0].name) {\r\n          const currentInputField = data[0].name[0];\r\n          console.log(currentInputField);\r\n\r\n          if (currentInputField === 'standard_assets' || currentInputField === 'insert_type') {\r\n            setFields(\r\n              getFields(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\r\n            );\r\n            setLabels(\r\n              getLabels(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\r\n            );\r\n            updateTotalKitQtysCols();\r\n            updateMonthCols();\r\n          } else {\r\n            const totalKitQtysCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'quantity',\r\n            );\r\n            const qtyPerKitCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'quantity_perkit',\r\n            );\r\n            const rateCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'rate',\r\n            );\r\n            const totalMatReqCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'tot_mat_req',\r\n            );\r\n            const totalCostCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'total_cost',\r\n            );\r\n            const monthCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'month',\r\n            );\r\n            const depCostCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'dep_cost',\r\n            );\r\n\r\n            qtyPerKitCols.forEach((i, idx) => {\r\n              if (\r\n                currentInputField === totalKitQtysCols[idx] ||\r\n                currentInputField === qtyPerKitCols[idx] ||\r\n                currentInputField === rateCols[idx] ||\r\n                currentInputField === totalMatReqCols[idx] ||\r\n                currentInputField === totalCostCols[idx] ||\r\n                currentInputField === monthCols[idx] ||\r\n                currentInputField === depCostCols[idx]\r\n              ) {\r\n                if (\r\n                  form.getFieldValue(totalKitQtysCols[idx]) &&\r\n                  form.getFieldValue(qtyPerKitCols[idx])\r\n                ) {\r\n                  const totalMatReqVal =\r\n                    form.getFieldValue(totalKitQtysCols[idx]) *\r\n                    form.getFieldValue(qtyPerKitCols[idx]);\r\n                  form.setFieldsValue({\r\n                    [totalMatReqCols[idx]]: totalMatReqVal,\r\n                    [totalCostCols[idx]]: form.getFieldValue(rateCols[idx]) * totalMatReqVal,\r\n                  });\r\n                } else {\r\n                  form.setFieldsValue({\r\n                    [totalMatReqCols[idx]]: 0,\r\n                    [totalCostCols[idx]]: 0,\r\n                  });\r\n                }\r\n\r\n                if (\r\n                  form.getFieldValue(totalCostCols[idx]) &&\r\n                  form.getFieldValue(monthCols[idx]) &&\r\n                  form.getFieldValue('yantra_cycle')\r\n                ) {\r\n                  form.setFieldsValue({\r\n                    [depCostCols[idx]]: _.round(\r\n                      (form.getFieldValue(totalCostCols[idx]) /\r\n                        form.getFieldValue(monthCols[idx]) /\r\n                        30) *\r\n                        form.getFieldValue('yantra_cycle'),\r\n                      2,\r\n                    ),\r\n                  });\r\n                } else {\r\n                  form.setFieldsValue({\r\n                    [depCostCols[idx]]: 0,\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [form, fields, labels],\r\n  );\r\n\r\n  // const handleFieldsChange = (data) => {\r\n  //   if(data[0]){\r\n  //     if(data[0].name){\r\n  //       if(data[0].name[0]==='standard_assets') {\r\n  //         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\r\n  //         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\r\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\r\n  //       }\r\n  //       if(data[0].name[0]==='insert_type') {\r\n  //         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\r\n  //         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\r\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\r\n  //       }}}\r\n  // }\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Form\r\n        initialValues={{\r\n          ...state,\r\n          insert_type: state.insert_type || 'Insert',\r\n          standard_assets: state.standard_assets || 'FLC',\r\n        }}\r\n        onFinish={submit}\r\n        form={form}\r\n        layout=\"vertical\"\r\n        // hideRequiredMark\r\n        onFieldsChange={handleFieldsChange}\r\n        autoComplete=\"off\">\r\n        <Divider orientation=\"left\">Capex</Divider>\r\n        <div className=\"row px-2\">\r\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\r\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\r\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\r\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\r\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\r\n          {state.solution_palletized_crate ? <Tag>Solution Palletized Crate</Tag> : null}\r\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\r\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\r\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\r\n        </div>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          <Col span={3}>\r\n            <div className=\"p-2 flex row justify-center\">\r\n              <b />\r\n            </div>\r\n          </Col>\r\n          {[...fields].slice(0, 7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item.customLabel}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(0, 1).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(0, 7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(1, 2).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(7, 14).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(2, 3).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(14, 21).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(3, 4).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(21, 28).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(4, 5).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(28, 35).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(5, 6).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(35, 42).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(6, 7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(42, 49).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        {/* <Form.List name='solutions'> */}\r\n        {/*  {(fields, { add, remove }) => { */}\r\n        {/*    return ( */}\r\n        {/*      <div> */}\r\n        {/*        {fields.map((field, index) => ( */}\r\n        {/*          <Row align='middle'> */}\r\n        {/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\r\n        {/*              <Col span={4}> */}\r\n        {/*                <div className='p-2'> */}\r\n        {/*                  {formItem({ */}\r\n        {/*                    ...item, */}\r\n        {/*                    noLabel: index !== 0, */}\r\n        {/*                    form, */}\r\n        {/*                    others: { */}\r\n        {/*                      formOptions: { */}\r\n        {/*                        ...field, */}\r\n        {/*                        // hidden:true, */}\r\n        {/*                        name: [field.name, item.key], */}\r\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\r\n        {/*                      }, */}\r\n        {/*                    }, */}\r\n        {/*                  })} */}\r\n        {/*                </div> */}\r\n        {/*              </Col> */}\r\n        {/*            ))} */}\r\n        {/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\r\n        {/*              <Col span={3}> */}\r\n        {/*                <div className='p-2'> */}\r\n        {/*                  {formItem({ */}\r\n        {/*                    ...item, */}\r\n        {/*                    noLabel: index !== 0, */}\r\n        {/*                    form, */}\r\n        {/*                    others: { */}\r\n        {/*                      formOptions: { */}\r\n        {/*                        ...field, */}\r\n        {/*                        name: [field.name, item.key], */}\r\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\r\n        {/*                      }, */}\r\n        {/*                    }, */}\r\n        {/*                  })} */}\r\n        {/*                </div> */}\r\n        {/*              </Col> */}\r\n        {/*            ))} */}\r\n        {/*          </Row> */}\r\n        {/*        ))} */}\r\n        {/*      </div> */}\r\n        {/*    ); */}\r\n        {/*  }} */}\r\n        {/* </Form.List> */}\r\n        <Row justify=\"space-between\">\r\n          <div className=\"row\">\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled>\r\n              Submit\r\n            </Button>\r\n            <div className=\"p-2\" />\r\n            <Button type=\"primary\" onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <Button type=\"link\" htmlType=\"submit\">\r\n            <ArrowRightOutlined style={{fontSize: 30}} />\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default SolutionProposalCreateCPForm;\r\n"],"sourceRoot":""}