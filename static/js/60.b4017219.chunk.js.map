{"version":3,"sources":["hocs/formItem.hoc.js","../../common/helpers/mrHelper.js","../../common/formFields/createCP/logisticsCreateCP.formFields.js","forms/CreateCP/logisticsCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","mergeArray","a","b","obj","filter","mr","id","is_rejected","reason","remarks","statusCheck","isAllocated","isRejected","status","filterActive","_","data","el","active","ifNanReturnZero","num","parseInt","logisticCreateCPFormFields","placeholder","noStyle","disabled","LogisticCreateCPForm","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","createCPData","submit","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","handleFieldsChange","useCallback","currentInputField","getFieldValue","setFieldsValue","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick","ArrowRightOutlined"],"mappings":"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","file":"static/js/60.b4017219.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport {Icon} from '@ant-design/compatible';\r\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\r\n\r\nconst {Option} = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input size=\"middle\" {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber size=\"middle\" {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\r\n            <p className=\"ant-upload-drag-icon\">\r\n              <Icon type=\"inbox\" />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\r\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value=\"Ggg\">\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName=\"checked\"\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","export const mergeArray = (a, b) => {\r\n  return a.map((item) => {\r\n    const obj = b.filter((i) => i.mr === item.id)[0];\r\n    if (obj) {\r\n      return {\r\n        ...item,\r\n        is_rejected: obj.is_rejected,\r\n        reason: obj.reason,\r\n        mr: obj.mr,\r\n        remarks: obj.remarks,\r\n      };\r\n    }\r\n    return item;\r\n  });\r\n};\r\n\r\nexport const statusCheck = (isAllocated, isRejected) => {\r\n  let status = 'Allocated';\r\n  if (!isAllocated && !isRejected) {\r\n    status = 'Pending';\r\n  } else if (isAllocated && !isRejected) {\r\n    status = 'Allocated';\r\n  } else if (!isAllocated && isRejected) {\r\n    status = 'Rejected';\r\n  }\r\n  return status;\r\n};\r\n\r\nexport const filterActive = (_, data) => {\r\n  return _.filter(data, (el) => el.active);\r\n};\r\n\r\nexport const ifNanReturnZero = (num) => {\r\n  return parseInt(num) ? parseInt(num) : 0;\r\n};\r\n","// min_warehouse = models.FloatField(default=0, blank=True, null=True)\r\n// transportation_w1_c1 = models.FloatField(default=0, blank=True, null=True)\r\n// transportation_c2_w2 = models.FloatField(default=0, blank=True, null=True)\r\n// transportation_w2_w1 = models.FloatField(default=0, blank=True, null=True)\r\n// total_cost_supply_chain = models.FloatField(default=0, blank=True, null=True)\r\n// labor_cost_perton = models.FloatField(default=0, blank=True, null=True)\r\n// repair_reconditioning = models.FloatField(default=0, blank=True, null=True)\r\n// other_cost = models.FloatField(default=0, blank=True, null=True)\r\n// total_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n\r\nimport { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\nexport const logisticCreateCPFormFields = [\r\n  {\r\n    key: 'min_warehouse',\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    kwargs: {\r\n      placeholder: 'Minimum Warehouse',\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },\r\n    customLabel: 'Minimum Warehouse'\r\n  },\r\n  {\r\n    key: 'transportation_w1_c1',\r\n    kwargs: {\r\n      placeholder: 'Transportation W1 C1',\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Transportation W1 C1',\r\n  },\r\n  {\r\n    key: 'transportation_c2_w2',\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    kwargs: {\r\n      placeholder: 'Transportation C2 W2',\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },    customLabel: 'Transportation C2 W2'\r\n  },\r\n  {\r\n    key: 'transportation_w2_w1',\r\n    kwargs: {\r\n      placeholder: 'Transportation W2 W1',\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Transportation W2 W1',\r\n  },\r\n  {\r\n    key: 'total_cost_supply_chain',\r\n    kwargs: {\r\n      placeholder: 'Total Cost Supply Chain',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },    type: FORM_ELEMENT_TYPES.INPUT,\r\n\r\n    customLabel: 'Total Cost Supply Chain',\r\n  },\r\n  {\r\n    key: 'labor_cost_perton',\r\n    kwargs: {\r\n      placeholder: 'Labour Cost Perton',\r\n\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },\r\n    customLabel: 'Labour Cost Perton',\r\n  },\r\n  {\r\n    key: 'repair_reconditioning',\r\n    kwargs: {\r\n      placeholder: 'Repair Reconditioning',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },\r\n    customLabel: 'Repair Reconditioning',\r\n  },\r\n  {\r\n    key: 'other_cost',\r\n    kwargs: {\r\n      placeholder: 'Other Cost',\r\n\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },\r\n    customLabel: 'Other Cost',\r\n  },\r\n  {\r\n    key: 'total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      disabled: true,\r\n\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n\r\n    },\r\n    customLabel: 'Total Cost',\r\n  },\r\n\r\n]\r\n","import React, { useEffect, useState,useCallback } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\r\nimport { ArrowRightOutlined } from '@ant-design/icons';\r\nimport { logisticCreateCPFormFields }\r\n  from 'common/formFields/createCP/logisticsCreateCP.formFields';\r\n\r\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\r\n\r\n\r\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.createCPData))\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\r\n    setLoading(false)\r\n    if(active===2){\r\n      onNext();\r\n    }\r\n  }\r\n  useEffect( ()=>{\r\n    if(active!==2){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n\r\n\r\n  const handleFieldsChange = useCallback(data => {\r\n\r\n\t\tif(data[0]){\r\n\t\t\tif(data[0].name) {\r\n\r\n        const currentInputField = data[0].name[0];\r\n        console.log(currentInputField);\r\n\r\n\r\n        if (currentInputField===\"min_warehouse\" || currentInputField===\"transportation_w1_c1\" || currentInputField===\"transportation_c2_w2\" || currentInputField===\"transportation_w2_w1\" || currentInputField===\"total_cost_supply_chain\" || currentInputField===\"labor_cost_perton\" || currentInputField===\"repair_reconditioning\" || currentInputField===\"other_cost\" || currentInputField===\"total_cost\") {\r\n          if ( form.getFieldValue(\"min_warehouse\") || form.getFieldValue(\"transportation_w1_c1\") || form.getFieldValue(\"transportation_c2_w2\") || form.getFieldValue(\"transportation_w2_w1\") ) {\r\n            form.setFieldsValue({\r\n              \"total_cost_supply_chain\" : ifNanReturnZero(form.getFieldValue(\"min_warehouse\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w1_c1\"))+ifNanReturnZero(form.getFieldValue(\"transportation_c2_w2\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w2_w1\")),\r\n            })\r\n          } else {\r\n            form.setFieldsValue({\r\n              \"total_cost_supply_chain\" : 0,\r\n            })\r\n          }\r\n\r\n          if ( form.getFieldValue(\"total_cost_supply_chain\") || form.getFieldValue(\"labor_cost_perton\") || form.getFieldValue(\"repair_reconditioning\") || form.getFieldValue(\"other_cost\") ) {\r\n            form.setFieldsValue({\r\n              \"total_cost\" : ifNanReturnZero(form.getFieldValue(\"total_cost_supply_chain\"))+ifNanReturnZero(form.getFieldValue(\"labor_cost_perton\"))+ifNanReturnZero(form.getFieldValue(\"repair_reconditioning\"))+ifNanReturnZero(form.getFieldValue(\"other_cost\")),\r\n            })\r\n          } else {\r\n            form.setFieldsValue({\r\n              \"total_cost\" : 0,\r\n            })\r\n          }\r\n        }\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n  \t},[form,])\r\n\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Divider orientation='left'>Logistic Details</Divider>\r\n      <Form\r\n        onFinish={submit}\r\n        form={form}\r\n        initialValues={\r\n          { ...state }\r\n        }\r\n        layout='vertical'\r\n        onFieldsChange={handleFieldsChange}\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit' disabled>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <Button type='link' htmlType='submit'>\r\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default LogisticCreateCPForm;\r\n\r\n"],"sourceRoot":""}