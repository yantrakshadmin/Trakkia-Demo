{"version":3,"sources":["hocs/formItem.hoc.js","../../common/helpers/mrHelper.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","mergeArray","a","b","obj","filter","mr","id","is_rejected","reason","remarks","statusCheck","isAllocated","isRejected","status","filterActive","_","data","el","active","ifNanReturnZero","num","parseInt","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","disabled","noStyle","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Crate","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","operatingCostMonthlyFormFields","LogisticCreateCPForm","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","createCPData","submit","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","success","useEffect","STOP_STEP_LOADING","updateDirectCost","useCallback","getFieldValue","directCost","forEach","setFieldsValue","round","updateOperatingCost","updateContingencyMargin","updateMinCostToBillForATrip","updatePriceShouldBeBilled","updateMarginAgreedForThisFlow","updateGrossMargins","handleFieldsChange","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick"],"mappings":"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","file":"static/js/58.8f7541c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport {Icon} from '@ant-design/compatible';\r\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\r\n\r\nconst {Option} = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input size=\"middle\" {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber size=\"middle\" {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\r\n            <p className=\"ant-upload-drag-icon\">\r\n              <Icon type=\"inbox\" />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\r\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value=\"Ggg\">\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName=\"checked\"\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","export const mergeArray = (a, b) => {\r\n  return a.map((item) => {\r\n    const obj = b.filter((i) => i.mr === item.id)[0];\r\n    if (obj) {\r\n      return {\r\n        ...item,\r\n        is_rejected: obj.is_rejected,\r\n        reason: obj.reason,\r\n        mr: obj.mr,\r\n        remarks: obj.remarks,\r\n      };\r\n    }\r\n    return item;\r\n  });\r\n};\r\n\r\nexport const statusCheck = (isAllocated, isRejected) => {\r\n  let status = 'Allocated';\r\n  if (!isAllocated && !isRejected) {\r\n    status = 'Pending';\r\n  } else if (isAllocated && !isRejected) {\r\n    status = 'Allocated';\r\n  } else if (!isAllocated && isRejected) {\r\n    status = 'Rejected';\r\n  }\r\n  return status;\r\n};\r\n\r\nexport const filterActive = (_, data) => {\r\n  return _.filter(data, (el) => el.active);\r\n};\r\n\r\nexport const ifNanReturnZero = (num) => {\r\n  return parseInt(num) ? parseInt(num) : 0;\r\n};\r\n","import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\r\n\r\nconst solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const solutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'standard_assets',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: solutionAssetOptions,\r\n    },\r\n    customLabel: 'Standard Assets',\r\n  },\r\n  {\r\n    key: 'insert_type',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: ['Insert', 'HDPE Tray'],\r\n    },\r\n    customLabel: 'Insert Type',\r\n  },\r\n  // {\r\n  //   key: 'cost',\r\n  //   type: FORM_ELEMENT_TYPES.INPUT,\r\n  //   kwargs: {\r\n  //     placeholder: 'Cost',\r\n  //     type:'number'\r\n  //   },\r\n  //   customLabel:'Cost'\r\n  // },\r\n];\r\n\r\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\r\n\r\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\r\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// mould_month = models.FloatField(default=0, blank=True, null=True)\r\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n\r\nexport const formListSolutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'specification',\r\n    kwargs: {\r\n      placeholder: 'Specification',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Specification',\r\n  },\r\n  {\r\n    key: 'quantity',\r\n    kwargs: {\r\n      placeholder: 'Total KIT Quantity',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total KIT Quantity',\r\n  },\r\n  {\r\n    key: 'quantity_per_kit',\r\n    kwargs: {\r\n      placeholder: 'Qyt/KIT',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Qyt/KIT',\r\n  },\r\n  {\r\n    key: 'rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: 'tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Material Req',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: 'total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: 'month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: 'dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const stdAssetsProposalCreateCPFormFields = [\r\n  {\r\n    key: '_quantity',\r\n    kwargs: {\r\n      placeholder: 'Quantity',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Kit Qty',\r\n  },\r\n  {\r\n    key: '_quantity_perkit',\r\n    kwargs: {\r\n      placeholder: 'Quantity/Kit',\r\n      type: 'number',\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Quantity/Kit',\r\n  },\r\n  {\r\n    key: '_rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: '_tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Mat. Req.',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: '_total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: '_month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n      type: 'number',\r\n      min: 0,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: '_dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const createFields = (arr) => {\r\n  let fields = [];\r\n  arr.map((key) => {\r\n    fields = [\r\n      ...fields,\r\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\r\n        ...item,\r\n        key: `${key}${item.key}`,\r\n      })),\r\n    ];\r\n    return null;\r\n  });\r\n  return fields;\r\n};\r\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\n\r\nexport const solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const getSolutionProposal = (record) => {\r\n  if (\r\n    record.standard_assets === 'FLC' ||\r\n    record.standard_assets === 'FSC' ||\r\n    record.standard_assets === 'PP Box'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.std_ast_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'CRT6412' ||\r\n    record.standard_assets === 'CRT6418' ||\r\n    record.standard_assets === 'CRT6423' ||\r\n    record.standard_assets === 'CRT6435'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'Palletized CRT6412' ||\r\n    record.standard_assets === 'Palletized CRT6418' ||\r\n    record.standard_assets === 'Palletized CRT6423' ||\r\n    record.standard_assets === 'Palletized CRT6435' ||\r\n    record.standard_assets === 'Palletized PP Box' ||\r\n    record.standard_assets === 'Plastic Pallet' ||\r\n    record.standard_assets === 'Wooden Pallet'\r\n  ) {\r\n    return {\r\n      Lid: 1,\r\n      Crate: 1,\r\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\r\n    };\r\n  }\r\n\r\n  return {};\r\n};\r\n\r\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\r\n\r\nexport const getLabels = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6412',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6418',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6423',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6435',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'PP Box': ['PP Box'],\r\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\r\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\r\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getFields = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\r\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\r\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\r\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const formatStr = (str, typeStr) => {\r\n  return `${str}_${typeStr}`;\r\n};\r\n\r\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'PP Box':\r\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\r\n    'Palletized PP Box': [\r\n      formatStr('std_ast', typeStr),\r\n      formatStr('palletized_lid', typeStr),\r\n      formatStr('pallet', typeStr),\r\n    ],\r\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getDefaultMonthValue = (type) => {\r\n  switch (type) {\r\n    case 'std_ast':\r\n      return 18;\r\n    case 'crate_lid':\r\n      return 12;\r\n    case 'palletized_lid':\r\n      return 12;\r\n    case 'insert1':\r\n      return 12;\r\n    case 'insert2':\r\n      return 12;\r\n    case 'sep_sheet':\r\n      return 12;\r\n    case 'mould':\r\n      return 18;\r\n    case 'hdpe':\r\n      return 12;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\n\r\nexport const operatingCostMonthlyFormFields = [\r\n  {\r\n    key: 'direct_cost',\r\n    kwargs: {\r\n      placeholder: 'Direct Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true, },\r\n    },\r\n    customLabel: 'Direct Cost',\r\n  },\r\n  {\r\n    key: 'operating_cost',\r\n    kwargs: {\r\n      placeholder: 'Operating Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Operating Cost',\r\n  },\r\n  {\r\n    key: 'contigency_margin',\r\n    kwargs: {\r\n      placeholder: 'Contingency Margin',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Contingency Margin',\r\n  },\r\n  {\r\n    key: 'min_cost_for_trip',\r\n    kwargs: {\r\n      placeholder: 'Min cost to bill for a trip',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Min cost to bill for a trip',\r\n  },\r\n  {\r\n    key: 'billing_price',\r\n    kwargs: {\r\n      placeholder: 'Price should be billed @ 20% margin',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Price should be billed @ 20% margin',\r\n  },\r\n  {\r\n    key: 'agreed_margin',\r\n    kwargs: {\r\n      placeholder: 'Margin agreed for this flow',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Margin agreed for this flow (%)',\r\n  },\r\n  {\r\n    key: 'trip_cost',\r\n    kwargs: {\r\n      placeholder: 'TRIP COST (SALES)',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'TRIP COST (SALES)',\r\n  },\r\n  {\r\n    key: 'gross_margins',\r\n    kwargs: {\r\n      placeholder: 'Gross Margins',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Gross Margins (%)',\r\n  },\r\n  {\r\n    key: 'remarks',\r\n    kwargs: {\r\n      placeholder: 'Remarks',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Remarks',\r\n  },\r\n];\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\r\nimport { operatingCostMonthlyFormFields } from 'common/formFields/createCP/operatingCostMonthly.formFields';\r\nimport { getFieldsByColumn, } from 'common/constants/solutionproposalCreateCP';\r\nimport { createCP, editCP } from 'common/api/auth';\r\n\r\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.createCPData))\r\n\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    console.log(data,'data to be submitted')\r\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\r\n    setLoading(false)\r\n    if(active === 3){\r\n      if(id){\r\n        const { error } = await editCP(id,{ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Edit.',\r\n            description:\r\n              'Something went wrong CP editing failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n        }\r\n      }\r\n      else{\r\n        const { error } = await createCP({ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Create.',\r\n            description:\r\n              'Something went wrong CP creation failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n          notification.success({\r\n            message: 'CP Created/Edited Successfully.',\r\n          });\r\n        }\r\n      }\r\n    }}\r\n\r\n  useEffect( ()=>{\r\n    if(active!==3){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n\r\n  const updateDirectCost = useCallback(() => {\r\n    if (form.getFieldValue('standard_assets') && form.getFieldValue('insert_type') && form.getFieldValue(\"kit_based_on_usage_ratio\")) {\r\n      let directCost = 0;\r\n      const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\r\n      console.log(depCostCols,'depCostCols')\r\n      depCostCols.forEach((i) => {\r\n        console.log(form.getFieldValue(i),i);\r\n        directCost += form.getFieldValue(i);\r\n      })\r\n      console.log(directCost,'directCost')\r\n      directCost /=form.getFieldValue(\"kit_based_on_usage_ratio\");\r\n      console.log(directCost,'again dC')\r\n      form.setFieldsValue({\r\n        \"direct_cost\" : _.round(directCost,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"direct_cost\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateOperatingCost = useCallback(() => {\r\n    if (form.getFieldValue(\"total_cost\")) {\r\n      form.setFieldsValue({\r\n        \"operating_cost\" : _.round(form.getFieldValue(\"total_cost\"),2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"operating_cost\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateContingencyMargin = useCallback(() => {\r\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\")) {\r\n      form.setFieldsValue({\r\n        \"contigency_margin\" : _.round((form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\"))*0.02,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"contigency_margin\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateMinCostToBillForATrip = useCallback(() => {\r\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\") && form.getFieldValue(\"contigency_margin\")) {\r\n      form.setFieldsValue({\r\n        \"min_cost_for_trip\" : _.round(form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\")+form.getFieldValue(\"contigency_margin\"),2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"min_cost_for_trip\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updatePriceShouldBeBilled = useCallback(() => {\r\n    if (form.getFieldValue(\"min_cost_for_trip\")) {\r\n      form.setFieldsValue({\r\n        \"billing_price\" : _.round(form.getFieldValue(\"min_cost_for_trip\")/0.8,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"billing_price\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateMarginAgreedForThisFlow = useCallback(() => {\r\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"min_cost_for_trip\")) {\r\n      form.setFieldsValue({\r\n        \"agreed_margin\" : _.round((form.getFieldValue(\"trip_cost\")/form.getFieldValue(\"min_cost_for_trip\")-1)*100,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"agreed_margin\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateGrossMargins = useCallback(() => {\r\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"operating_cost\")) {\r\n      form.setFieldsValue({\r\n        \"gross_margins\" : _.round(((form.getFieldValue(\"trip_cost\")-form.getFieldValue(\"operating_cost\"))/form.getFieldValue(\"trip_cost\")*100),2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"gross_margins\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  useEffect( () => {\r\n    updateDirectCost();\r\n    updateOperatingCost();\r\n    updateContingencyMargin();\r\n    updateMinCostToBillForATrip();\r\n    updatePriceShouldBeBilled();\r\n    updateMarginAgreedForThisFlow();\r\n    updateGrossMargins();\r\n  }, [] )\r\n\r\n  const handleFieldsChange = useCallback(data => {\r\n\r\n    if(data[0]){\r\n      if(data[0].name) {\r\n\r\n        const currentInputField = data[0].name[0];\r\n        console.log(currentInputField);\r\n\r\n        if (currentInputField===\"trip_cost\") {\r\n          updateMarginAgreedForThisFlow();\r\n          updateGrossMargins();\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  \t},[form,])\r\n\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Divider orientation='left'>Opex</Divider>\r\n      <Form\r\n        onFinish={submit}\r\n        form={form}\r\n        initialValues={\r\n          { ...state }\r\n        }\r\n        layout='vertical'\r\n        onFieldsChange={handleFieldsChange}\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit'>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default LogisticCreateCPForm;\r\n\r\n"],"sourceRoot":""}